using System.IO; // For Path.Combine
using System;
using Sharpmake; // Contains the entire Sharpmake object library.
using System.Collections.Generic;

namespace Inferno
{
    // Represents the project that will be generated by Sharpmake and that contains
    // the sample C++ code.
    [Generate]
    public class ShaderCustomBuild : InfernoProject
    {
        readonly string SHADER_ROOT;
        readonly string DXC;
        readonly string outputFolder = Path.Combine(Defines.Paths.INFERNO_PROJECTS, $"editor/data/shaders");

        public ShaderCustomBuild() : base("shaders", Project.Configuration.OutputType.Utility)
        {
            SHADER_ROOT = Path.Combine(Defines.Paths.INFERNO_DATA, @"shaders");
            DXC = Path.Combine(Defines.Paths.INFERNO_THIRD_PARTY_BIN, @"dxc/dxc.exe");

            SourceRootPath = SHADER_ROOT;
            string [] fileEntries = Directory.GetFiles(SHADER_ROOT, "*.hlsl", SearchOption.AllDirectories);
            foreach(string fileName in fileEntries)
            {
                SourceFiles.Add(fileName);
            }
        }

        public override void ConfigureAll(Project.Configuration conf, Target target)
        {
            base.ConfigureAll(conf, target);

            if(!Directory.Exists(outputFolder))
                Directory.CreateDirectory(outputFolder);

            //Vertex shaders
            string [] vertexEntries = Directory.GetFiles(SHADER_ROOT, "*.vert.hlsl", SearchOption.AllDirectories);
            foreach(string vertexEntry in vertexEntries)
            {
                Console.WriteLine(vertexEntry);
                string filename = Path.GetFileName(vertexEntry);
                filename = Path.ChangeExtension(filename, ".dxil");
                string dest = Path.Combine(outputFolder, filename);
                string cmd = $"{DXC} -T vs_6_3 -rootsig-define LocalRootSignature -Fo {dest} {vertexEntry}";

                conf.EventPreBuild.Add(cmd);
            }

            //Pixel shaders
            string [] pixelEntries = Directory.GetFiles(SHADER_ROOT, "*.pixel.hlsl", SearchOption.AllDirectories);
            foreach(string pixelEntry in pixelEntries)
            {
                Console.WriteLine(pixelEntry);
                string filename = Path.GetFileName(pixelEntry);
                filename = Path.ChangeExtension(filename, ".dxil");
                string dest = Path.Combine(outputFolder, filename);
                string cmd = $"{DXC} -T ps_6_3 -Fo {dest} {pixelEntry}";

                conf.EventPreBuild.Add(cmd);
            }
        }
    }
}